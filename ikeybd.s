// ikeybd.s		Touch Keybord images and Shift		Rev. 12/13/2020

	//----------------------------------------------------------------
	// Draw Keyboard:
        // NORMAL Keyboard Image:	etaoin  shrdlc  umwfgy  pbvk  jxqz
kybdI:	.ascii " \" x v w i o f bs ? + - * / = "
	.ascii  " ' z y u a n d , cr 7 8 9 < > "
	.ascii  " j k g t h e r sp . 4 5 6 [ ] "
	.ascii  " q b p m l s c ^^ 0 1 2 3 ( ) \0"
	// NORMAL Keyboard Codes:
kybdC:	.ascii  " \" x v w i o f "
	.byte   0x08, 0x08	// Backspace
	.ascii  " ? + - * / = "
	.ascii  " ' z y u a n d , "
	.byte   0x0A, 0x0A	// Enter - Return
	.ascii  " 7 8 9 < > "
	.ascii  " j k g t h e r "
	.byte   0x20, 0x20	// Spacebar
	.ascii  " . 4 5 6 [ ] "
	.ascii  " q b p m l s c "
	.byte   0xFC, 0xFC	// Shift character
	.ascii  " 0 1 2 3 ( ) "

        // SHIFTED Keyboard Image:
shbdI:	.ascii " \\ X V W I O F bs | ~ - _ + = "
	.ascii  " ` Z Y U A N D ; cr * { } < > "
	.ascii  " J K G T H E R sp : % ^ & [ ] "
	.ascii  " Q B P M L S C ^^ ! @ # $ ( ) \0"
	// SHIFTED Keyboard Codes:
shbdC:	.ascii " \\ X V W I O F "
	.byte   0x08, 0x08	// Backspace
	.ascii  " | ~ - _ + = "
	.ascii  " ` Z Y U A N D , "
	.byte   0x0A, 0x0A	// Enter - Return
	.ascii  " * { } < > "
	.ascii  " J K G T H E R "
	.byte   0x20, 0x20	// Spacebar
	.ascii  " : % ^ & [ ] "
	.ascii  " Q B P M L S C "
	.byte	0xFD, 0xFD	// Shift character
	.ascii  " ! @ # % ( ) "

	// CONTROL Keyboard Image:
ctrlI:	.ascii  " @ A B C D E F G B: 0 1 2 3 4 "
	.ascii  " H I J K L M N O    5 6 7 8 9 "
	.ascii  " P Q R S T U V W G: 0 1 2 3 4 "
	.ascii  " X Y Z [ \\ ] ^ ^^ _ 5 6 7 8 9 \0"
	// SCONTROL Keyboard Codes:
ctrlC:	.byte 0x20,0x00,0x20,0x01,0x20,0x02,0x20,0x03,0x20,0x04,0x20,0x05,0x20,0x06,0x20,0x07
	.byte 0x20,0x20,0x20,0x20,0xB0,0x20,0xB1,0x20,0xB2,0x20,0xB3,0x20,0xB4,0x20
	.byte 0x20,0x08,0x20,0x09,0x20,0x0A,0x20,0x0B,0x20,0x0C,0x20,0x0D,0x20,0x0E,0x20,0x0F
	.byte 0x20,0x20,0x20,0x20,0xB5,0x20,0xB6,0x20,0xB7,0x20,0xB8,0x20,0xB9,0x20
	.byte 0x20,0x10,0x20,0x11,0x20,0x12,0x20,0x13,0x20,0x14,0x20,0x15,0x20,0x16,0x20,0x17
	.byte 0x20,0x20,0x20,0x20,0xF0,0x20,0xF1,0x20,0xF2,0x20,0xF3,0x20,0xF4,0x20
	.byte 0x20,0x18,0x20,0x19,0x20,0x1A,0x20,0x1B,0x20,0x1C,0x20,0x1D,0x20,0x1E
	.byte 0x20,0xFE,0xFE,0x20,0x1F,0x20,0xF5,0x20,0xF6,0x20,0xF7,0x20,0xF8,0x20,0xF9,0x20

	// BLUE-GREEN Keyboard Image:
blgrI:	.ascii  " @ A B C D E F G sp ! \" # $ % "
	.ascii  " H I J K L M N O  & ' ( ) * + "
	.ascii  " P Q R S T U V W    , - . / : "
	.ascii  " X Y Z [ \\ ] ^ ^^ _ ; < = > ? \0"
	// BLUE Keyboard Codes:
blueC:	.byte 0x20,0x80,0x20,0x81,0x20,0x82,0x20,0x83,0x20,0x84,0x20,0x85,0x20,0x86,0x20,0x87
	.byte 0x20,0xA0,0xA0,0x20,0xA1,0x20,0xA2,0x20,0xA3,0x20,0xA4,0x20,0xA5,0x20
	.byte 0x20,0x88,0x20,0x89,0x20,0x8A,0x20,0x8B,0x20,0x8C,0x20,0x8D,0x20,0x8E,0x20,0x8F
	.byte 0x20,0x20,0xA6,0x20,0xA7,0x20,0xA8,0x20,0xA9,0x20,0xAA,0x20,0xAB,0x20
	.byte 0x20,0x90,0x20,0x91,0x20,0x92,0x20,0x93,0x20,0x94,0x20,0x95,0x20,0x96,0x20,0x97
	.byte 0x20,0x20,0x20,0x20,0xAC,0x20,0xAD,0x20,0xAE,0x20,0xAF,0x20,0xBA,0x20
	.byte 0x20,0x98,0x20,0x99,0x20,0x9A,0x20,0x9B,0x20,0x9C,0x20,0x9D,0x20,0x9E
	.byte 0x20,0xFF,0xFF,0x20,0x9F,0x20,0xBB,0x20,0xBC,0x20,0xBD,0x20,0xBE,0x20,0xBF,0x20
	// GREEN Keyboard Codes:
grenC:	.byte 0x20,0xC0,0x20,0xC1,0x20,0xC2,0x20,0xC3,0x20,0xC4,0x20,0xC5,0x20,0xC6,0x20,0xC7
	.byte 0x20,0xE0,0xE0,0x20,0xE1,0x20,0xE2,0x20,0xE3,0x20,0xE4,0x20,0XE5,0x20
	.byte 0x20,0xC8,0x20,0xC9,0x20,0xCA,0x20,0xCB,0x20,0xCC,0x20,0xCD,0x20,0xCE,0x20,0xDF
	.byte 0x20,0x20,0xE6,0x20,0xE7,0x20,0xE8,0x20,0xE9,0x20,0xEA,0x20,0xEB,0x20
	.byte 0x20,0xD0,0x20,0xD1,0x20,0xD2,0x20,0xD3,0x20,0xD4,0x20,0xD5,0x20,0xD6,0x20,0xD7
	.byte 0x20,0x20,0x20,0x20,0xEC,0x20,0xED,0x20,0xEE,0x20,0xEF,0x20,0xFA,0x20
	.byte 0x20,0xD8,0x20,0xD9,0x20,0xDA,0x20,0xDB,0x20,0xDC,0x20,0xDD,0x20,0xDE
	.byte 0x20,0xFB,0xFB,0x20,0xDF,0x20,0xFB,0x20,0xFC,0x20,0xFD,0x20,0xFE,0x20,0xFF,0x20

// Select green keyboard
grnkyb:	push {r8,r9}
	bl kybsav	// save settings
	adr r2,grenC	// select l.c. code table
	adr r3,blgrI	// cue string pointer to kybd image
	mov r4,#0x7E0	// use green
	b kybsup
// Select blue keyboard
blukyb:	push {r8,r9}
	bl kybsav	// save settings
	adr r2,blueC	// select l.c. code table
	adr r3,blgrI	// cue string pointer to kybd image
	mov r4,#0x1F	// use blue
	b kybsup
// Select cntrl. keyboard
ctrkyb:	push {r8,r9}
	bl kybsav	// save settings
	adr r2,ctrlC	// select l.c. code table
	adr r3,ctrlI	// cue string pointer to kybd image
	mov r4,#0xF800	// use red
	b kybsup
// Select u.c. keyboard
shfkyb:	push {r8,r9}
	bl kybsav	// save settings
	adr r2,shbdC	// select u.c. code table
	adr r3,shbdI	// cue string pointer to kybd image
	b kybsuw
// Select l.c. keyboard
dspkyb:	push {r8,r9}
	bl kybsav	// save settings
	adr r2,kybdC	// select l.c. code table
	adr r3,kybdI	// cue string pointer to kybd image
	// drop thru

// Keyboard setup:
kybsuw:	mov r4,#0xFFFF	// use white
kybsup:	str r4,[r1,#forgnd]	// change font color
	str r2,[r1,#keybdc]	// set active key-code table
	mov r0,#0x1000000	// keyboard position (col:0 row:256)
	str r0,[r1,#xcursr]	// cue screen to kybd target
	strb r0,[r1,#scroff]	// clear scroll
	mov r0,#0x11
	strb r0,[r1,#fontsz]	// use small font
	mov r0,r3	// get image
	bl LCDstr	// copy image (NOW in r0) to screen only
	// restore settings
	str r8,[r1,#forgnd]	// restore colors
	str r9,[r1,#xcursr]	// restore xcursor, ycursor
	str r5,[r1,#scroff]	// scroll, font, shim, stylus
	pop {r8,r9}
	//
	ldrb r0,[r11],#1 // chain to next bytecode
	ldr r15,[r10,r0,lsl #2]

// save settings
kybsav:	mov r1,#0x20000000 // cue to SRAM
	ldr r8,[r1,#forgnd]	// save colors
	ldr r9,[r1,#xcursr]	// save xcrusor, ycursor
	ldr r5,[r1,#scroff]	// scroll, font, shim, stylus
	bx lr

// r1: LCD only  String Output:
LCDstr:
	push {r1,lr}		// save reg. and return
	mov r1,r0		// cue index to r1 (variables always passed in r0)
	b LCsobg		// merge after the output

LCsolp:	bl LCDout		// output each character (to screen only)
LCsobg:	ldrb r0,[r1],#+1	// fetch char. & cue to next
	cmp r0,#0
	bne LCsolp		// not final 0? (then loop)
	pop {r1,pc}		// (else exit)
